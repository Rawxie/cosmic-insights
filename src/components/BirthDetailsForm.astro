---
import SavedTexts from './SavedTexts';

interface Props {
  onSubmit: (data: { birthDetails: string; gender: string }) => void;
}

const { onSubmit } = Astro.props;
---

<form class="bg-gray-900 rounded-xl p-8 shadow-2xl" id="astrologyForm">
  <div class="space-y-6">
    <div>
      <label for="birthDetails" class="form-label">Enter Your Birth Details</label>
      <textarea 
        id="birthDetails" 
        name="birthDetails" 
        class="form-input w-full h-48 resize-none" 
        placeholder="Enter your details in the following format:
Name: [Your Full Name]
Date of Birth: [DD-MM-YYYY]
Birth Place: [City, State, Country]
Birth Time: [HH:MM AM/PM]"
        required
      ></textarea>
    </div>

    <div>
      <label for="gender" class="form-label">Gender</label>
      <select id="gender" name="gender" class="form-input w-full" required>
        <option value="">Select Gender</option>
        <option value="male">Male</option>
        <option value="female">Female</option>
        <option value="other">Other</option>
      </select>
    </div>
  </div>

  <div class="mt-8 flex justify-between items-center">
    <button type="button" class="btn-secondary" id="saveButton">
      Save Text
    </button>
    <button type="submit" class="btn-primary text-lg" id="submitButton">
      Get Your Reading
    </button>
  </div>
</form>

<SavedTexts client:load />

<script>
  const form = document.getElementById('astrologyForm') as HTMLFormElement;
  const birthDetails = document.getElementById('birthDetails') as HTMLTextAreaElement;
  const gender = document.getElementById('gender') as HTMLSelectElement;
  const saveButton = document.getElementById('saveButton') as HTMLButtonElement;

  // Save text function
  function saveText() {
    const text = birthDetails.value;
    if (!text) return;

    const savedTexts = JSON.parse(localStorage.getItem('savedAstrologyTexts') || '[]');
    const newText = {
      id: Date.now().toString(),
      text: text,
      timestamp: Date.now()
    };
    
    savedTexts.unshift(newText);
    localStorage.setItem('savedAstrologyTexts', JSON.stringify(savedTexts));
    
    // Dispatch event to notify SavedTexts component
    window.dispatchEvent(new CustomEvent('textSaved'));
  }

  // Load saved form data
  function loadSavedFormData() {
    const savedData = localStorage.getItem('astrologyFormData');
    if (savedData) {
      const data = JSON.parse(savedData);
      birthDetails.value = data.birthDetails || '';
      gender.value = data.gender || '';
    }
  }

  // Save form data
  function saveFormData() {
    const formData = {
      birthDetails: birthDetails.value,
      gender: gender.value
    };
    localStorage.setItem('astrologyFormData', JSON.stringify(formData));
  }

  // Load saved data when page loads
  loadSavedFormData();

  // Save form data when inputs change
  form.addEventListener('input', saveFormData);

  // Add save button click handler
  saveButton.addEventListener('click', saveText);

  form.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = {
      birthDetails: birthDetails.value,
      gender: gender.value
    };
    // @ts-ignore - onSubmit is defined in the Astro component props
    onSubmit(formData);
  });

  // Listen for load text events from SavedTexts component
  window.addEventListener('loadSavedText', ((e: CustomEvent) => {
    birthDetails.value = e.detail.text;
  }) as EventListener);
</script>

<style>
  .btn-secondary {
    @apply px-6 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors;
  }
</style> 