---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
---

<Layout title="Try Astro - AI Astrology Reading">
  <Navigation currentPage="try-astro" />
  
  <main class="min-h-screen bg-gray-900 py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
    <!-- Cosmic vectors -->
    <div class="cosmic-vector cosmic-vector-1"></div>
    <div class="cosmic-vector cosmic-vector-2"></div>
    <div class="cosmic-vector cosmic-vector-3"></div>

    <div class="max-w-3xl mx-auto relative z-10">
      <div class="text-center mb-12">
        <h1 class="text-5xl font-bold text-white mb-4 animate-fade-in font-space-grotesk">Try Astro Reading</h1>
        <p class="text-xl text-gray-400 animate-fade-in font-space-mono" style="animation-delay: 0.2s">Experience our AI-powered astrology reading</p>
      </div>

      <div class="bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-xl p-6 mb-8 transform transition-all duration-300 hover:scale-[1.02]">
        <h2 class="text-2xl font-semibold text-white mb-4 flex items-center font-space-grotesk">
          <span class="mr-2">âœ¨</span> Enter Your Birth Details
        </h2>
        <form id="birthForm" class="space-y-4">
          <div>
            <textarea
              id="birthDetails"
              name="birthDetails"
              rows="6"
              class="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent transition-all duration-300 font-space-mono"
              placeholder="Enter your birth details in this format:
Name: Your Name
Date of Birth: DD-MM-YYYY
Birth Place: City, State, Country
Birth Time: HH:MM AM/PM"
            ></textarea>
          </div>
          <div>
            <button
              type="submit"
              class="w-full px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-offset-2 focus:ring-offset-gray-900 transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] font-space-grotesk"
            >
              Get Your Reading
            </button>
          </div>
        </form>
      </div>

      <div id="loadingIndicator" class="hidden">
        <div class="flex justify-center items-center space-x-2 text-white">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500"></div>
          <span class="animate-pulse font-space-mono">Consulting the stars...</span>
        </div>
      </div>

      <div id="readingResult" class="hidden bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-xl p-6 mb-8 transform transition-all duration-300">
      </div>

      <div id="questionSection" class="hidden bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-xl p-6 transform transition-all duration-300">
        <h2 class="text-2xl font-semibold text-white mb-4 flex items-center font-space-grotesk">
          <span class="mr-2">ðŸ”®</span> Ask a Question
        </h2>
        <form id="questionForm" class="space-y-4">
          <div>
            <textarea
              id="question"
              name="question"
              rows="3"
              class="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-gray-100 focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent transition-all duration-300 font-space-mono"
              placeholder="Ask any question about your reading..."
            ></textarea>
          </div>
          <div>
            <button
              type="submit"
              class="w-full px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold rounded-lg hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-offset-2 focus:ring-offset-gray-900 transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] font-space-grotesk"
            >
              Get Answer
            </button>
          </div>
        </form>
      </div>

      <div id="answerSection" class="hidden bg-gray-800/80 backdrop-blur-sm rounded-lg shadow-xl p-6 mt-8 transform transition-all duration-300">
        <h2 class="text-2xl font-semibold text-white mb-4 flex items-center font-space-grotesk">
          <span class="mr-2">ðŸ’«</span> Your Answer
        </h2>
        <div id="answerResult" class="text-gray-300 font-space-mono"></div>
      </div>

      <div id="errorMessage" class="hidden bg-red-900/80 backdrop-blur-sm text-white p-4 rounded-lg mt-4 transform transition-all duration-300 font-space-mono">
      </div>
    </div>
  </main>

  <script>
    let lastBirthDetails = null;

    document.getElementById('birthForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const birthDetails = document.getElementById('birthDetails').value;
      lastBirthDetails = birthDetails;
      
      document.getElementById('loadingIndicator').classList.remove('hidden');
      document.getElementById('readingResult').classList.add('hidden');
      document.getElementById('questionSection').classList.add('hidden');
      document.getElementById('answerSection').classList.add('hidden');
      document.getElementById('errorMessage').classList.add('hidden');

      try {
        const response = await fetch('/api/reading', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ birthDetails }),
        });

        const data = await response.json();

        if (data.error) {
          throw new Error(data.error);
        }

        document.getElementById('readingResult').innerHTML = data.reading;
        document.getElementById('readingResult').classList.remove('hidden');
        document.getElementById('questionSection').classList.remove('hidden');
      } catch (error) {
        document.getElementById('errorMessage').textContent = error.message;
        document.getElementById('errorMessage').classList.remove('hidden');
      } finally {
        document.getElementById('loadingIndicator').classList.add('hidden');
      }
    });

    document.getElementById('questionForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const question = document.getElementById('question').value;
      
      if (!lastBirthDetails) {
        document.getElementById('errorMessage').textContent = 'Please get a reading first before asking questions.';
        document.getElementById('errorMessage').classList.remove('hidden');
        return;
      }

      document.getElementById('loadingIndicator').classList.remove('hidden');
      document.getElementById('errorMessage').classList.add('hidden');

      try {
        const response = await fetch('/api/reading', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ birthDetails: lastBirthDetails, question }),
        });

        const data = await response.json();

        if (data.error) {
          throw new Error(data.error);
        }

        document.getElementById('answerResult').innerHTML = data.reading;
        document.getElementById('answerSection').classList.remove('hidden');
      } catch (error) {
        document.getElementById('errorMessage').textContent = error.message;
        document.getElementById('errorMessage').classList.remove('hidden');
      } finally {
        document.getElementById('loadingIndicator').classList.add('hidden');
      }
    });
  </script>
</Layout> 