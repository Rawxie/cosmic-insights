---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import BirthDetailsForm from '../components/BirthDetailsForm.astro';
import ReadingResult from '../components/ReadingResult.astro';
import FAQ from '../components/FAQ';

let reading = '';
let isLoading = false;
let error = null;

// Handle form submission
async function handleFormSubmit(data: { birthDetails: string; gender: string }) {
	isLoading = true;
	error = null;
	reading = '';

	try {
		const response = await fetch('/api/reading', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(data)
		});

		const result = await response.json();

		if (!response.ok) {
			throw new Error(result.error || result.details || 'Failed to generate reading');
		}
		
		if (!result.reading) {
			throw new Error('No reading was generated');
		}

		reading = result.reading;
	} catch (err) {
		error = err instanceof Error ? err.message : 'An unexpected error occurred';
		console.error('Error:', err);
	} finally {
		isLoading = false;
	}
}

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout title="AstroYou - Your Personal Astrology Guide">
	<Navigation currentPage="home" />
	<section class="relative z-10 flex flex-col items-center justify-center min-h-[70vh] text-center px-4 pt-16 pb-12">
		<div class="glass-panel max-w-2xl mx-auto p-10 mb-10 shadow-2xl">
			<h1 class="text-5xl md:text-6xl font-bold mb-6 font-serif text-yellow-300 drop-shadow-lg">AstroYou</h1>
			<p class="text-xl md:text-2xl text-gray-200 mb-8 font-sans">Authentic, AI-powered astrology readings. Discover your cosmic path.</p>
			<a href="/try-astro" class="inline-block px-8 py-4 bg-gradient-to-r from-yellow-400 via-purple-500 to-indigo-600 text-white font-bold rounded-full shadow-lg hover:scale-105 transition-transform text-lg tracking-wide">Get Your Reading</a>
		</div>
		<div class="absolute top-0 left-0 w-full h-full pointer-events-none z-0">
			<svg width="100%" height="100%" class="absolute inset-0" style="opacity:0.15;z-index:0;" xmlns="http://www.w3.org/2000/svg">
				<defs>
					<radialGradient id="astro-bg" cx="50%" cy="50%" r="80%">
						<stop offset="0%" stop-color="#fbbf24" stop-opacity="0.2"/>
						<stop offset="100%" stop-color="#312e81" stop-opacity="0.1"/>
					</radialGradient>
				</defs>
				<rect width="100%" height="100%" fill="url(#astro-bg)"/>
			</svg>
		</div>
	</section>

	<section class="max-w-5xl mx-auto px-4 py-12">
		<div class="grid md:grid-cols-3 gap-8">
			<div class="glass-panel p-8 flex flex-col items-center text-center">
				<div class="text-4xl mb-4">ðŸ”®</div>
				<h2 class="text-xl font-bold mb-2 font-serif text-yellow-200">Step 1: Enter Details</h2>
				<p class="text-gray-200">Fill in your birth details in our beautiful, step-by-step form.</p>
			</div>
			<div class="glass-panel p-8 flex flex-col items-center text-center">
				<div class="text-4xl mb-4">âœ¨</div>
				<h2 class="text-xl font-bold mb-2 font-serif text-yellow-200">Step 2: AI Analysis</h2>
				<p class="text-gray-200">Our advanced AI analyzes your chart for deep, personalized insights.</p>
			</div>
			<div class="glass-panel p-8 flex flex-col items-center text-center">
				<div class="text-4xl mb-4">ðŸŒŸ</div>
				<h2 class="text-xl font-bold mb-2 font-serif text-yellow-200">Step 3: Discover</h2>
				<p class="text-gray-200">Receive your cosmic reading instantly and explore your destiny.</p>
			</div>
		</div>
	</section>

	<section class="max-w-6xl mx-auto px-4 py-12">
		<h2 class="text-3xl md:text-4xl font-bold text-center mb-10 font-serif text-yellow-200">Why AstroYou?</h2>
		<div class="grid md:grid-cols-4 gap-8">
			<div class="glass-panel p-6 flex flex-col items-center text-center">
				<div class="text-3xl mb-2">ðŸ¤–</div>
				<h3 class="font-bold mb-1 font-serif text-yellow-100">AI-Powered</h3>
				<p class="text-gray-200 text-sm">Cutting-edge AI for accurate, insightful readings.</p>
			</div>
			<div class="glass-panel p-6 flex flex-col items-center text-center">
				<div class="text-3xl mb-2">ðŸ”’</div>
				<h3 class="font-bold mb-1 font-serif text-yellow-100">Private & Secure</h3>
				<p class="text-gray-200 text-sm">Your data is encrypted and never shared.</p>
			</div>
			<div class="glass-panel p-6 flex flex-col items-center text-center">
				<div class="text-3xl mb-2">âš¡</div>
				<h3 class="font-bold mb-1 font-serif text-yellow-100">Instant Results</h3>
				<p class="text-gray-200 text-sm">Get your reading in seconds, anytime, anywhere.</p>
			</div>
			<div class="glass-panel p-6 flex flex-col items-center text-center">
				<div class="text-3xl mb-2">ðŸŒ™</div>
				<h3 class="font-bold mb-1 font-serif text-yellow-100">Authentic Vibes</h3>
				<p class="text-gray-200 text-sm">Designed for true astrology loversâ€”unique, cosmic, and beautiful.</p>
			</div>
		</div>
	</section>

	<section class="max-w-4xl mx-auto px-4 py-12">
		<div class="glass-panel p-10 text-center">
			<h2 class="text-2xl md:text-3xl font-bold mb-4 font-serif text-yellow-200">Ready to discover your cosmic path?</h2>
			<a href="/try-astro" class="inline-block mt-4 px-8 py-4 bg-gradient-to-r from-yellow-400 via-purple-500 to-indigo-600 text-white font-bold rounded-full shadow-lg hover:scale-105 transition-transform text-lg tracking-wide">Start Your Reading</a>
		</div>
	</section>

	<style>
		@keyframes fadeIn {
			from { opacity: 0; transform: translateY(10px); }
			to { opacity: 1; transform: translateY(0); }
		}
		.animate-fade-in {
			animation: fadeIn 0.5s ease-out forwards;
		}
		.faq-answer {
			transition: max-height 0.3s ease-out;
			overflow: hidden;
		}

		.faq-question svg {
			transition: transform 0.3s ease;
		}

		.faq-item {
			transition: transform 0.2s ease;
		}

		.faq-item:hover {
			transform: translateY(-2px);
		}

		.faq-question:hover {
			background-color: rgba(55, 65, 81, 0.5);
		}
	</style>

	<script>
		let lastBirthDetails = '';

		document.getElementById('birthForm')?.addEventListener('submit', async (e) => {
			e.preventDefault();
			const form = e.target as HTMLFormElement;
			const birthDetails = (form.elements.namedItem('birthDetails') as HTMLTextAreaElement).value;
			
			if (!birthDetails.trim()) {
				showError('Please enter your birth details');
				return;
			}

			lastBirthDetails = birthDetails;
			await submitReading(birthDetails);
		});

		document.getElementById('questionForm')?.addEventListener('submit', async (e) => {
			e.preventDefault();
			const form = e.target as HTMLFormElement;
			const question = (form.elements.namedItem('question') as HTMLTextAreaElement).value;
			
			if (!question.trim()) {
				showError('Please enter your question');
				return;
			}

			await submitQuestion(question);
		});

		async function submitReading(birthDetails: string) {
			const loadingIndicator = document.getElementById('loadingIndicator');
			const readingResult = document.getElementById('readingResult');
			const questionSection = document.getElementById('questionSection');
			const errorMessage = document.getElementById('errorMessage');

			try {
				loadingIndicator?.classList.remove('hidden');
				errorMessage?.classList.add('hidden');
				readingResult?.classList.add('hidden');
				questionSection?.classList.add('hidden');

				const response = await fetch('/api/reading', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ birthDetails }),
				});

				const data = await response.json();

				if (data.error) {
					throw new Error(data.details || data.error);
				}

				if (readingResult) {
					readingResult.innerHTML = data.reading;
					readingResult.classList.remove('hidden');
					questionSection?.classList.remove('hidden');
				}
			} catch (error) {
				showError(error instanceof Error ? error.message : 'An error occurred');
			} finally {
				loadingIndicator?.classList.add('hidden');
			}
		}

		async function submitQuestion(question: string) {
			const loadingIndicator = document.getElementById('loadingIndicator');
			const readingResult = document.getElementById('readingResult');
			const errorMessage = document.getElementById('errorMessage');

			try {
				loadingIndicator?.classList.remove('hidden');
				errorMessage?.classList.add('hidden');
				readingResult?.classList.add('hidden');

				const response = await fetch('/api/reading', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ 
						birthDetails: lastBirthDetails,
						question: question 
					}),
				});

				const data = await response.json();

				if (data.error) {
					throw new Error(data.details || data.error);
				}

				if (readingResult) {
					readingResult.innerHTML = data.reading;
					readingResult.classList.remove('hidden');
				}
			} catch (error) {
				showError(error instanceof Error ? error.message : 'An error occurred');
			} finally {
				loadingIndicator?.classList.add('hidden');
			}
		}

		function showError(message: string) {
			const errorMessage = document.getElementById('errorMessage');
			if (errorMessage) {
				errorMessage.textContent = message;
				errorMessage.classList.remove('hidden');
			}
		}

		// Wait for the DOM to be fully loaded
		window.addEventListener('load', () => {
			// FAQ Accordion functionality
			const faqQuestions = document.querySelectorAll('.faq-question');
			
			faqQuestions.forEach(question => {
				question.addEventListener('click', () => {
					const answer = question.nextElementSibling;
					const arrow = question.querySelector('svg');
					
					// Toggle current answer
					const isHidden = answer && answer.classList.contains('hidden');
					
					// First close all answers
					faqQuestions.forEach(q => {
						const a = q.nextElementSibling;
						const arr = q.querySelector('svg');
						if (a && a !== answer) a.classList.add('hidden');
						if (arr && arr !== arrow) arr.classList.remove('rotate-180');
					});

					// Then toggle the clicked answer
					if (answer && arrow) {
						if (isHidden) {
							answer.classList.remove('hidden');
							arrow.classList.add('rotate-180');
						} else {
							answer.classList.add('hidden');
							arrow.classList.remove('rotate-180');
						}
					}
				});
			});
		});
	</script>
</Layout>
